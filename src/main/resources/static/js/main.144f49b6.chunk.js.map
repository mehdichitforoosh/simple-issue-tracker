{"version":3,"sources":["config/history.js","config/axios.js","components/developer/AddDeveloper.js","components/developer/EditDeveloper.js","components/commons/Pagination.js","components/developer/ListDeveloper.js","components/issue/enum/index.js","components/issue/validator/index.js","components/issue/AddIssue.js","components/issue/EditIssue.js","components/issue/ListIssue.js","components/planner/ShowPlanner.js","components/home/Home.js","components/error/NotFound.js","components/template/Content.js","components/template/NavBar.js","App.js","index.js"],"names":["createBrowserHistory","axios","defaults","baseURL","constraints","name","presence","allowEmpty","message","value","attribute","length","minimum","maximum","withRouter","props","type","useState","setName","formDisabled","setFormDisabled","successSaved","setSuccessSaved","errors","setErrors","responseErrors","setResponseErrors","className","onSubmit","event","preventDefault","result","validate","isEmpty","params","post","then","response","status","HttpStatus","CREATED","data","isObject","Error","id","setTimeout","catch","error","BAD_REQUEST","errorData","finally","role","map","index","htmlFor","classNames","isArray","onChange","target","disabled","onClick","history","goBack","version","setVersion","useEffect","developerId","match","getBasic","get","OK","put","Pagination","state","currentPage","initialPage","previousPage","bind","nextPage","prevProps","this","setState","totalItems","itemsPerPage","Math","ceil","pageRange","pageNumbers","pageCount","getPageCount","rightDistance","floor","firstIndex","lastIndex","push","i","callback","pageNumber","obj","nextProps","renderOnOnlyOnePage","getPageNumbers","render","getClassNames","tabIndex","href","React","Component","defaultProps","size","setSize","start","setStart","setTotalItems","items","setItems","disabledDelete","setDisabledDelete","deleteInProgress","setDeleteInProgress","developerIdForDelete","setDeveloperIdForDelete","deleteModal","useRef","paginate","selectedPageNumber","getItems","na","undefined","n","queryString","stringify","sort","url","startIndex","placeholder","to","developer","charAt","style","width","height","placement","trigger","overlay","modalEle","current","Modal","keyboard","show","showDeleteModal","marginBottom","ref","delete","NO_CONTENT","getInstance","hide","hideDeleteModal","IssueType","STORY","BUG","StoryStatus","NEW","ESTIMATED","COMPLETED","BugStatus","VERIFIED","RESOLVED","BugPriority","CRITICAL","MAJOR","MINOR","validators","checkIssueType","options","key","attributes","Object","keys","checkStoryStatus","checkStoryPointValue","checkBugStatus","checkBugPriority","title","issueType","storyStatus","storyPointValue","bugStatus","bugPriority","description","setTitle","setDescription","setIssueType","setStoryStatus","setStoryPointValue","setBugPriority","setBugStatus","getClassnames","path","estimatedPoint","priority","max","resize","rows","issueId","issueIdForDelete","setIssueIdForDelete","ti","t","issue","src","point","setPoint","maxPoint","setMaxPoint","maxPo","mp","valueInInteger","parseInt","setPointInput","weekItems","assignedDeveloper","Home","NotFound","Content","component","AddDeveloper","EditDeveloper","ListDeveloper","AddIssue","EditIssue","ListIssue","ShowPlanner","exact","NavBar","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.144f49b6.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import axios from 'axios';\n\naxios.defaults.baseURL = 'http://localhost:9000';\n\n","import { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from 'axios';\nimport validate from 'validate.js';\nimport classNames from 'classnames';\nimport HttpStatus from 'http-status-codes';\n\nconst AddDeveloper = (props) => {\n\n    const [name, setName] = useState('');\n    const [formDisabled, setFormDisabled] = useState(false);\n    const [successSaved, setSuccessSaved] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [responseErrors, setResponseErrors] = useState({});\n\n    const getClassnames = (type) => {\n        switch (type) {\n            case 'NAME':\n                return classNames({\n                    'form-control': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.name)\n                        && validate.isArray(errors.name)\n                        && !validate.isEmpty(errors.name[0])\n                });\n            default:\n                return classNames({\n                    'form-control': true\n                });\n        }\n    }\n\n    const clearForm = () => {\n        setName('');\n    }\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        const result = validate({ name }, constraints);\n        if (!validate.isEmpty(result)) {\n            setErrors(result);\n            return;\n        } else {\n            setFormDisabled(true);\n            setErrors({});\n            setResponseErrors([]);\n        }\n        let params = {};\n        if (!validate.isEmpty(name)) {\n            params = { ...params, name }\n        }\n        axios.post(`/api/v1/developers`, params)\n            .then(response => {\n                if (response.status === HttpStatus.CREATED) {\n                    if (validate.isEmpty(response.data) || !validate.isObject(response.data)) {\n                        throw new Error(\"response data is not correct.\")\n                    }\n                    const data = response.data;\n                    const id = data.id;\n                    clearForm();\n                    setSuccessSaved(true);\n                    setTimeout(function () { setSuccessSaved(false); }, 5000);\n                }\n            }).catch(error => {\n                if (error.response) {\n                    if (error.response.status === HttpStatus.BAD_REQUEST) {\n                        const errorData = error.response.data.message;\n                        setResponseErrors([errorData]);\n                    }\n                }\n            }).finally(() => {\n                setFormDisabled(false);\n            });\n    }\n\n    return (\n        <div className=\"container mt-4 mb-4\">\n            <h2>Add Developer</h2>\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <form onSubmit={onSubmit}>\n                        {\n                            responseErrors.length > 0 &&\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                <ul className=\"m-0 p-3\">\n                                    {\n                                        responseErrors.map((error, index) => <li key={index} className=\"font-weight-lighter\">{error}</li>)\n                                    }\n                                </ul>\n                            </div>\n                        }\n                        {\n                            successSaved &&\n                            <div className=\"alert alert-success\" role=\"alert\">Your developer have been successfully saved!</div>\n                        }\n                        <div className=\"form-group required mb-2\">\n                            <label htmlFor=\"name\" className=\"form-label\">Name</label>\n                            <input type=\"text\" className={getClassnames('NAME')}\n                                id=\"name\"\n                                value={name}\n                                onChange={event => setName(event.target.value)}\n                                aria-describedby=\"nameHelp\" />\n                            <div id=\"nameHelp\" className=\"form-text\">Must have at least 3 charachters length.</div>\n                            {\n                                (!validate.isEmpty(errors)\n                                    && !validate.isEmpty(errors.name)\n                                    && validate.isArray(errors.name)\n                                    && !validate.isEmpty(errors.name[0])) &&\n                                <div className=\"invalid-feedback\">{errors.name[0]}</div>\n                            }\n                        </div>\n                        <div className=\"mt-4\">\n                            <button type=\"submit\" className=\"btn btn-primary\" disabled={formDisabled} >Save</button>\n                            <button type=\"button\" className=\"btn btn-light mx-2\" onClick={() => props.history.goBack()} >Cancel</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst constraints = {\n    name: {\n        presence: {\n            allowEmpty: false,\n            message: function (value, attribute) {\n                return \"must not be empty (between 3 and 100 characters)\";\n            }\n        },\n        length: {\n            minimum: 3,\n            maximum: 100,\n            message: function (value, attribute) {\n                return \"must not be empty (between 3 and 100 characters)\";\n            }\n        }\n    },\n}\n\nexport default withRouter(AddDeveloper);","import { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from 'axios';\nimport validate from 'validate.js';\nimport classNames from 'classnames';\nimport HttpStatus from 'http-status-codes';\n\nconst EditDeveloper = (props) => {\n\n    const [name, setName] = useState('');\n    const [version, setVersion] = useState(0);\n    const [formDisabled, setFormDisabled] = useState(false);\n    const [successSaved, setSuccessSaved] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [responseErrors, setResponseErrors] = useState({});\n\n    const getClassnames = (type) => {\n        switch (type) {\n            case 'NAME':\n                return classNames({\n                    'form-control': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.name)\n                        && validate.isArray(errors.name)\n                        && !validate.isEmpty(errors.name[0])\n                });\n            default:\n                return classNames({\n                    'form-control': true\n                });\n        }\n    }\n\n    useEffect(() => {\n        const { developerId } = props.match.params;\n        getBasic(developerId);\n    }, []);\n\n    const getBasic = (developerId) => {\n        axios.get(`/api/v1/developers/${developerId}`)\n            .then(response => {\n                if (response.status === HttpStatus.OK) {\n                    if (validate.isEmpty(response.data) || !validate.isObject(response.data)) {\n                        throw new Error(\"response data in not correct.\")\n                    }\n                    const data = response.data;\n                    const name = !validate.isEmpty(data.name) ? data.name : '';\n                    const version = !validate.isEmpty(data.version) ? data.version : 0;\n                    setName(name);\n                    setVersion(version);\n                }\n            })\n            .catch(error => {\n                if (error.response) {\n\n                }\n            });\n    }\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        const result = validate({ name }, constraints);\n        if (!validate.isEmpty(result)) {\n            setErrors(result);\n            return;\n        } else {\n            setFormDisabled(true);\n            setErrors({});\n            setResponseErrors([]);\n        }\n        let params = {};\n        if (!validate.isEmpty(name)) {\n            params = { ...params, name }\n        }\n        params = { ...params, version };\n        const { developerId } = props.match.params;\n        axios.put(`/api/v1/developers/${developerId}`, params)\n            .then(response => {\n                if (response.status === HttpStatus.OK) {\n                    const data = response.data;\n                    const version = !validate.isEmpty(data.version) ? data.version : 0;\n                    setSuccessSaved(true);\n                    setVersion(version);\n                    setTimeout(function () { setSuccessSaved(false); }, 5000);\n                }\n            }).catch(error => {\n                if (error.response) {\n                    if (error.response.status === HttpStatus.BAD_REQUEST) {\n                        const errorData = error.response.data.message;\n                        setResponseErrors([errorData]);\n                    }\n                }\n            }).finally(() => {\n                setFormDisabled(false);\n            });\n    }\n\n    return (\n        <div className=\"container mt-4 mb-4\">\n            <h2>Edit Developer</h2>\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <form onSubmit={onSubmit}>\n                        {\n                            responseErrors.length > 0 &&\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                <ul className=\"m-0 p-3\">\n                                    {\n                                        responseErrors.map((error, index) => <li key={index} className=\"font-weight-lighter\">{error}</li>)\n                                    }\n                                </ul>\n                            </div>\n                        }\n                        {\n                            successSaved &&\n                            <div className=\"alert alert-success\" role=\"alert\">Your developer have been successfully updated!</div>\n                        }\n                        <div className=\"form-group required mb-2\">\n                            <label htmlFor=\"name\" className=\"form-label\">Name</label>\n                            <input type=\"text\" className={getClassnames('NAME')}\n                                id=\"name\"\n                                value={name}\n                                onChange={event => setName(event.target.value)}\n                                aria-describedby=\"nameHelp\" />\n                            <div id=\"nameHelp\" className=\"form-text\">Must have at least 3 charachters length.</div>\n                            {\n                                (!validate.isEmpty(errors)\n                                    && !validate.isEmpty(errors.name)\n                                    && validate.isArray(errors.name)\n                                    && !validate.isEmpty(errors.name[0])) &&\n                                <div className=\"invalid-feedback\">{errors.name[0]}</div>\n                            }\n                        </div>\n                        <div className=\"mt-4\">\n                            <button type=\"submit\" className=\"btn btn-primary\" disabled={formDisabled} >Update</button>\n                            <button type=\"button\" className=\"btn btn-light mx-2\" onClick={() => props.history.goBack()} >Cancel</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst constraints = {\n    name: {\n        presence: {\n            allowEmpty: false,\n            message: function (value, attribute) {\n                return \"must not be empty (between 3 and 100 characters)\";\n            }\n        },\n        length: {\n            minimum: 3,\n            maximum: 100,\n            message: function (value, attribute) {\n                return \"must not be empty (between 3 and 100 characters)\";\n            }\n        }\n    }\n}\n\nexport default withRouter(EditDeveloper);","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass Pagination extends React.Component {\n\n    static defaultProps = {\n        itemsPerPage: 10,\n        totalItems: 0,\n        pageRange: 5,\n        initialPage: 1,\n        renderOnOnlyOnePage: true\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPage: this.props.initialPage,\n        };\n        this.previousPage = this.previousPage.bind(this);\n        this.currentPage = this.currentPage.bind(this);\n        this.nextPage = this.nextPage.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        // Typical usage (don't forget to compare props):\n        if (this.props.initialPage !== prevProps.initialPage) {\n            this.setState({\n                currentPage: this.props.initialPage,\n            });\n        }\n    }\n\n    getPageCount() {\n        const { totalItems, itemsPerPage } = this.props;\n        return Math.ceil(totalItems / itemsPerPage);\n    }\n\n    getPageNumbers() {\n        const { pageRange } = this.props;\n        const { currentPage } = this.state;\n        let pageNumbers = [];\n        let pageCount = this.getPageCount();\n        if (pageCount > pageRange) {\n            let rightDistance = Math.floor(pageRange / 2);\n            let firstIndex = currentPage - rightDistance > 0 ? currentPage - rightDistance : 1;\n            firstIndex = pageCount - pageRange < firstIndex ? (pageCount - pageRange + 1) : firstIndex;\n            let lastIndex = firstIndex + pageRange <= pageCount ? firstIndex + pageRange - 1 : pageCount;\n            let index = firstIndex;\n            while (index <= lastIndex) {\n                pageNumbers.push(index);\n                index++;\n            }\n        } else {\n            let i = 1;\n            while (i <= pageCount) {\n                pageNumbers.push(i);\n                i++;\n            }\n        }\n        return pageNumbers;\n    }\n\n    previousPage() {\n        const { currentPage } = this.state;\n        let previousPage = 1;\n        if (currentPage > 1) {\n            previousPage = currentPage - 1;\n        }\n        this.props.callback(previousPage);\n        this.setState({ currentPage: previousPage });\n    }\n\n    currentPage(pageNumber) {\n        this.props.callback(pageNumber);\n        this.setState({ currentPage: pageNumber });\n    }\n\n    nextPage() {\n        //Check next page exist\n        const { currentPage } = this.state;\n        const pageCount = this.getPageCount();\n        const nextPage = currentPage + 1;\n        if (nextPage <= pageCount) {\n            this.props.callback(nextPage);\n        }\n        this.setState({ currentPage: nextPage });\n    }\n\n    getClassNames(type, obj) {\n        switch (type) {\n            case 'PREVIOUS':\n                return classNames({\n                    'page-item': true,\n                    'disabled': obj.currentPage === 1\n                });\n            case 'NEXT':\n                return classNames({\n                    'page-item': true,\n                    'disabled': obj.nextPage > obj.pageCount\n                });\n            case 'PAGE':\n                return classNames({\n                    'page-item': true,\n                    'active': obj.pageNumber === obj.currentPage,\n                });\n            default:\n                return classNames({\n                    'page-item': true\n                });\n        }\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return (this.props.totalItems !== nextProps.totalItems\n            || this.props.itemsPerPage !== nextProps.itemsPerPage\n            || this.props.pageRange !== nextProps.pageRange\n            || this.props.initialPage !== nextProps.initialPage\n            || this.props.renderOnOnlyOnePage !== nextProps.renderOnOnlyOnePage);\n    }\n\n    /**\n     * https://getbootstrap.com/docs/4.3/components/pagination/\n     */\n    render() {\n        const { currentPage } = this.state;\n        const { renderOnOnlyOnePage } = this.props;\n        const nextPage = currentPage + 1;\n        const pageCount = this.getPageCount();\n        const pageNumbers = this.getPageNumbers();\n        let render = true;\n        if (pageCount === 1 && !renderOnOnlyOnePage) {\n            render = false;\n        }\n        return (\n            render && (\n                <nav aria-label=\"Page navigation\">\n                    <ul className=\"pagination pagination-sm\">\n                        <li className={this.getClassNames('PREVIOUS', { currentPage })}>\n                            <a className=\"page-link\" aria-label=\"Previous\" tabIndex={currentPage === 1 ? -1 : null} href=\"#\" onClick={(currentPage > 1) ? () => this.previousPage() : null}>\n                                <span aria-hidden=\"true\">&laquo;</span>\n                            </a>\n                        </li>\n                        {pageNumbers.map((pageNumber, index) => {\n                            return (\n                                <li key={index} className={this.getClassNames('PAGE', { pageNumber, currentPage })}>\n                                    <a className=\"page-link\" href=\"#\" onClick={() => this.currentPage(pageNumber)} >{pageNumber}</a>\n                                </li>\n                            );\n                        })}\n                        <li className={this.getClassNames('NEXT', { nextPage, pageCount })}>\n                            {/* Check for if-else */}\n                            <a className=\"page-link\" href=\"#\" aria-label=\"Next\" tabIndex={nextPage > pageCount ? -1 : null} onClick={(nextPage <= pageCount) ? () => this.nextPage() : null}>\n                                <span aria-hidden=\"true\">&raquo;</span>\n                            </a>\n                        </li>\n                    </ul>\n                </nav>)\n        );\n    }\n}\n\nPagination.propTypes = {\n    itemsPerPage: PropTypes.number,\n    totalItems: PropTypes.number.isRequired,\n    pageRange: PropTypes.number,\n    initialPage: PropTypes.number.isRequired,\n    renderOnOnlyOnePage: PropTypes.bool\n}\n\nexport default Pagination;","import { useState, useEffect, useRef } from \"react\";\nimport { Link, withRouter } from 'react-router-dom';\nimport Tooltip from 'rc-tooltip';\nimport axios from 'axios';\nimport validate from 'validate.js';\nimport queryString from 'query-string';\nimport HttpStatus from 'http-status-codes';\nimport Pagination from '../commons/Pagination';\nimport { Modal } from 'bootstrap';\nimport 'rc-tooltip/assets/bootstrap.css';\n\nconst ListDeveloper = (props) => {\n\n    const [name, setName] = useState('');\n    const [size, setSize] = useState(10);\n    const [start, setStart] = useState(0);\n    const [totalItems, setTotalItems] = useState(0);\n    const [items, setItems] = useState([]);\n    const [disabledDelete, setDisabledDelete] = useState(false);\n    const [deleteInProgress, setDeleteInProgress] = useState(false);\n    const [developerIdForDelete, setDeveloperIdForDelete] = useState('');\n    const deleteModal = useRef(null);\n\n\n    useEffect(() => paginate(1), [size, name]);\n\n    const paginate = (selectedPageNumber) => {\n        const start = (selectedPageNumber - 1) * size;\n        setStart(start);\n        getItems(start, size, name);\n    }\n\n    const getItems = (start, size, na) => {\n        const { history } = props;\n        const name = !validate.isEmpty(na) ? na : undefined;\n        // Update browser url\n        const n = queryString.stringify({ name }, { sort: false });\n        history.push(`${props.match.url}?${n}`);\n        const params = {\n            startIndex: start,\n            itemsPerPage: size,\n            name: name,\n        }\n        axios.get(`/api/v1/developers`, { params: params })\n            .then(response => {\n                if (response.status === HttpStatus.OK) {\n                    if (validate.isEmpty(response.data) || !validate.isObject(response.data)) {\n                        throw new Error(\"response data is not correct.\")\n                    }\n                    const data = response.data;\n                    const totalItems = data.totalItems;\n                    const items = data.items;\n                    setTotalItems(totalItems);\n                    setItems(items);\n                }\n            }).catch(error => {\n                if (error.response) {\n\n                }\n            });;\n    }\n\n    // Delete modal \n    const showDeleteModal = (developerId) => {\n        setDeveloperIdForDelete(developerId);\n        const modalEle = deleteModal.current\n        const bsModal = new Modal(modalEle, {\n            keyboard: false\n        })\n        bsModal.show();\n    }\n\n    const hideDeleteModal = () => {\n        const modalEle = deleteModal.current\n        const bsModal = Modal.getInstance(modalEle)\n        bsModal.hide();\n    }\n\n    const deleteDeveloper = () => {\n        const developerId = developerIdForDelete;\n        setDisabledDelete(true);\n        setDeleteInProgress(true);\n        axios.delete(`/api/v1/developers/${developerId}`)\n            .then(response => {\n                if (response.status === HttpStatus.NO_CONTENT) {\n                    setDisabledDelete(false);\n                    setDeleteInProgress(false);\n                    paginate(1);\n                    hideDeleteModal();\n                }\n            })\n            .catch(error => {\n                if (error.response) {\n                    setDisabledDelete(false);\n                    setDeleteInProgress(false);\n                }\n            });\n    }\n\n    const initialPage = Math.ceil(start / size) + 1;\n\n    return (\n        <div className=\"container mt-4 mb-4\">\n            <h2>List Developers</h2>\n            <div className=\"row\">\n                <div className=\"d-flex align-items-center mb-2 col-12 col-sm-7 col-md-6 col-lg-9\">\n                    <div className=\"mx-1\">\n                        <input id=\"name\" type=\"text\" className=\"form-control\"\n                            value={name} placeholder=\"Search by name\"\n                            onChange={event => setName(event.target.value)} />\n                    </div>\n                </div>\n                <div className=\"d-flex justify-content-end align-items-end mb-2 col-12 col-sm-5 col-md-6 col-lg-3\">\n                    <Link className=\"btn btn-primary mx-2\" to={`${props.match.url}/add`}>New Developer</Link>\n                </div>\n            </div>\n            {/* <hr /> */}\n            <div className=\"table-responsive\">\n                <table className=\"table table-hover\">\n                    <thead>\n                        <tr>\n                            <th className=\"text-nowrap\">Name</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    {\n                        items.length > 0 &&\n                        <tbody>\n                            {\n                                items.map(developer => {\n                                    const firstLetter = !validate.isEmpty(developer.name) ? developer.name.charAt(0) : '';\n                                    return (\n                                        <tr key={developer.id} >\n                                            <td className=\"align-middle text-nowrap\">{developer.name}</td>\n                                            <td className=\"align-middle\">\n                                                <div className=\"d-flex justify-content-end align-content-center\" >\n                                                    <div className=\"d-flex flex-row\" style={{ width: \"105px\", height: \"30px\" }}>\n                                                        <>\n                                                            <Tooltip placement=\"bottom\" trigger={['hover']} overlay={() => <span className=\"font-weight-lighter\">Edit</span>}>\n                                                                <Link className=\"btn btn-sm\" to={`${props.match.url}/${developer.id}/edit`}>\n                                                                    <i className=\"fas fa-edit fa-fw text-center\"></i>\n                                                                </Link>\n                                                            </Tooltip>\n                                                            <Tooltip placement=\"bottom\" trigger={['hover']} overlay={() => <span className=\"font-weight-lighter\">Delete</span>}>\n                                                                <button className=\"btn btn-sm\" onClick={() => showDeleteModal(developer.id)}>\n                                                                    <i className=\"fas fa-trash fa-fw text-center\"></i>\n                                                                </button>\n                                                            </Tooltip>\n                                                        </>\n                                                    </div>\n                                                </div>\n                                            </td>\n                                        </tr>\n                                    );\n                                })\n                            }\n                        </tbody>\n                    }\n                </table>\n            </div>\n            {\n                totalItems > 0 &&\n                <div className=\"d-flex justify-content-end align-items-center my-5\">\n                    <Pagination totalItems={totalItems} itemsPerPage={size}\n                        initialPage={initialPage} renderOnOnlyOnePage={false} callback={paginate} />\n                    <div className=\"mx-2\" style={{ width: \"80px\", marginBottom: \"1rem\" }}>\n                        <select id=\"size\" className=\"form-control form-select\" style={{ height: \"35px\" }}\n                            value={size}\n                            onChange={event => setSize(event.target.value)}>\n                            <option value=\"10\">10</option>\n                            <option value=\"25\">25</option>\n                            <option value=\"50\">50</option>\n                            <option value=\"100\">100</option>\n                            <option value=\"500\">500</option>\n                        </select>\n                    </div>\n                </div>\n            }\n            <div className=\"modal\" ref={deleteModal} id=\"deleteModal\" tabIndex=\"-1\" aria-labelledby=\"deleteModalLabel\" aria-hidden=\"true\" >\n                <div className=\"modal-dialog\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\">Delete Developer</h5>\n                            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                        </div>\n                        <div className=\"modal-body\">\n                            <p>Are you sure?</p>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n                            <button type=\"button\" className=\"btn btn-danger mx-1\" onClick={deleteDeveloper} disabled={disabledDelete}>\n                                {\n                                    deleteInProgress &&\n                                    <div className=\"spinner-border spinner-border-sm align-middle text-light mx-2\" role=\"status\">\n                                        <span className=\"sr-only\"></span>\n                                    </div>\n                                }\n                                Delete\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(ListDeveloper);","export const IssueType = {\n    STORY: 'Story',\n    BUG: 'Bug',\n}\n\nexport const StoryStatus = {\n    NEW: 'New',\n    ESTIMATED: 'Estimated',\n    COMPLETED: 'Completed'\n}\n\nexport const BugStatus = {\n    NEW: 'New',\n    VERIFIED: 'Verified',\n    RESOLVED: 'Resolved'\n}\n\nexport const BugPriority = {\n    CRITICAL: 'Critical',\n    MAJOR: 'Major',\n    MINOR: 'Minor'\n}","import validate from 'validate.js';\nimport { IssueType, StoryStatus, BugStatus, BugPriority } from '../enum';\n\nvalidate.validators.checkIssueType = function (value, options, key, attributes) {\n    if (validate.isEmpty(value)) {\n        return options.message;\n    }\n    const keys = Object.keys(IssueType);\n    for (const v of keys) {\n        if (v === value) {\n            return null;\n        }\n    }\n    return options.message;\n};\n\nvalidate.validators.checkStoryStatus = function (value, options, key, attributes) {\n    if (validate.isEmpty(value)) {\n        return options.message;\n    }\n    const keys = Object.keys(StoryStatus);\n    for (const v of keys) {\n        if (v === value) {\n            return null;\n        }\n    }\n    return options.message;\n};\n\nvalidate.validators.checkStoryPointValue = function (value, options, key, attributes) {\n    if (validate.isEmpty(value)) {\n        return options.message;\n    }\n    if (value >= 1 && value <= 10) {\n        return null;\n    }\n    return options.message;\n};\n\nvalidate.validators.checkBugStatus = function (value, options, key, attributes) {\n    if (validate.isEmpty(value)) {\n        return options.message;\n    }\n    const keys = Object.keys(BugStatus);\n    for (const v of keys) {\n        if (v === value) {\n            return null;\n        }\n    }\n    return options.message;\n};\n\nvalidate.validators.checkBugPriority = function (value, options, key, attributes) {\n    if (validate.isEmpty(value)) {\n        return options.message;\n    }\n    const keys = Object.keys(BugPriority);\n    for (const v of keys) {\n        if (v === value) {\n            return null;\n        }\n    }\n    return options.message;\n};","import { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from 'axios';\nimport validate from 'validate.js';\nimport classNames from 'classnames';\nimport HttpStatus from 'http-status-codes';\nimport { IssueType, StoryStatus, BugPriority, BugStatus } from './enum';\nimport './validator';\n\nconst AddIssue = (props) => {\n\n    const [title, setTitle] = useState('');\n    const [description, setDescription] = useState('');\n    const [issueType, setIssueType] = useState('STORY');\n    const [storyStatus, setStoryStatus] = useState('NEW');\n    const [storyPointValue, setStoryPointValue] = useState(1);\n    const [bugPriority, setBugPriority] = useState('MAJOR');\n    const [bugStatus, setBugStatus] = useState('NEW');\n    const [formDisabled, setFormDisabled] = useState(false);\n    const [successSaved, setSuccessSaved] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [responseErrors, setResponseErrors] = useState({});\n\n    const getClassnames = (type) => {\n        switch (type) {\n            case 'TITLE':\n                return classNames({\n                    'form-control': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.title)\n                        && validate.isArray(errors.title)\n                        && !validate.isEmpty(errors.title[0])\n                });\n            case 'ISSUE_TYPE':\n                return classNames({\n                    'form-control': true,\n                    'form-select': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.issueType)\n                        && validate.isArray(errors.issueType)\n                        && !validate.isEmpty(errors.issueType[0])\n                });\n            case 'STORY_STATUS':\n                return classNames({\n                    'form-control': true,\n                    'form-select': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.storyStatus)\n                        && validate.isArray(errors.storyStatus)\n                        && !validate.isEmpty(errors.storyStatus[0])\n                });\n            case 'ESTIMATED_POINT':\n                return classNames({\n                    'form-range': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.storyPointValue)\n                        && validate.isArray(errors.storyPointValue)\n                        && !validate.isEmpty(errors.storyPointValue[0])\n                });\n            case 'BUG_PRIORITY':\n                return classNames({\n                    'form-control': true,\n                    'form-select': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.bugPriority)\n                        && validate.isArray(errors.bugPriority)\n                        && !validate.isEmpty(errors.bugPriority[0])\n                });\n            case 'BUG_STATUS':\n                return classNames({\n                    'form-control': true,\n                    'form-select': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.bugStatus)\n                        && validate.isArray(errors.bugStatus)\n                        && !validate.isEmpty(errors.bugStatus[0])\n                });\n            case 'DESCRIPTION':\n                return classNames({\n                    'form-control': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.description)\n                        && validate.isArray(errors.description)\n                        && !validate.isEmpty(errors.description[0])\n                });\n            default:\n                return classNames({\n                    'form-control': true\n                });\n        }\n    }\n\n    const issueTypeOptions = () => {\n        const options = Object.keys(IssueType).map(key => {\n            let value = IssueType[key];\n            return <option key={key} value={key}>{value}</option>;\n        })\n        return options;\n    }\n\n    const storyStatusOptions = () => {\n        const options = Object.keys(StoryStatus).map(key => {\n            let value = StoryStatus[key];\n            return <option key={key} value={key}>{value}</option>;\n        })\n        return options;\n    }\n\n    const bugStatusOptions = () => {\n        const options = Object.keys(BugStatus).map(key => {\n            let value = BugStatus[key];\n            return <option key={key} value={key}>{value}</option>;\n        })\n        return options;\n    }\n\n    const bugPriorityOptions = () => {\n        const options = Object.keys(BugPriority).map(key => {\n            let value = BugPriority[key];\n            return <option key={key} value={key}>{value}</option>;\n        })\n        return options;\n    }\n\n    const clearForm = () => {\n        setTitle('');\n        setDescription('');\n        setIssueType('STORY');\n        setStoryStatus('NEW');\n        setStoryPointValue(1);\n        setBugPriority('MAJOR');\n        setBugStatus('NEW');\n    }\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        const result = validate({ title, issueType, storyStatus, storyPointValue, bugStatus, bugPriority, description }, constraints);\n        if (!validate.isEmpty(result)) {\n            setErrors(result);\n            return;\n        } else {\n            setFormDisabled(true);\n            setErrors({});\n            setResponseErrors([]);\n        }\n        let params = {};\n        if (!validate.isEmpty(title)) {\n            params = { ...params, title }\n        }\n        if (!validate.isEmpty(description)) {\n            params = { ...params, description };\n        }\n        let path;\n        if (issueType === \"STORY\") {\n            path = 'stories';\n            if (!validate.isEmpty(storyStatus)) {\n                params = { ...params, status: storyStatus }\n            }\n            if (!validate.isEmpty(storyPointValue)) {\n                params = { ...params, estimatedPoint: storyPointValue };\n            }\n        } else {\n            path = 'bugs';\n            if (!validate.isEmpty(bugStatus)) {\n                params = { ...params, status: bugStatus }\n            }\n            if (!validate.isEmpty(bugPriority)) {\n                params = { ...params, priority: bugPriority };\n            }\n        }\n        axios.post(`/api/v1/issues/${path}`, params)\n            .then(response => {\n                if (response.status === HttpStatus.CREATED) {\n                    if (validate.isEmpty(response.data) || !validate.isObject(response.data)) {\n                        throw new Error(\"response data is not correct.\")\n                    }\n                    const data = response.data;\n                    const id = data.id;\n                    clearForm();\n                    setSuccessSaved(true);\n                    setTimeout(function () { setSuccessSaved(false); }, 5000);\n                }\n            }).catch(error => {\n                if (error.response) {\n                    if (error.response.status === HttpStatus.BAD_REQUEST) {\n                        const errorData = error.response.data.message;\n                        setResponseErrors([errorData]);\n                    }\n                }\n            }).finally(() => {\n                setFormDisabled(false);\n            });\n    }\n    return (\n        <div className=\"container mt-4 mb-4\">\n            <h2>Add Issue</h2>\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <form onSubmit={onSubmit}>\n                        {\n                            responseErrors.length > 0 &&\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                <ul className=\"m-0 p-3\">\n                                    {\n                                        responseErrors.map((error, index) => <li key={index} className=\"font-weight-lighter\">{error}</li>)\n                                    }\n                                </ul>\n                            </div>\n                        }\n                        {\n                            successSaved &&\n                            <div className=\"alert alert-success\" role=\"alert\">Your issue have been successfully saved!</div>\n                        }\n                        <div className=\"form-group required mb-2\">\n                            <label htmlFor=\"title\" className=\"form-label\">Title</label>\n                            <input type=\"text\" className={getClassnames('TITLE')}\n                                id=\"title\"\n                                value={title}\n                                onChange={event => setTitle(event.target.value)}\n                                aria-describedby=\"titleHelp\" />\n                            <div id=\"titleHelp\" className=\"form-text\">Must have at least 3 charachters length.</div>\n                            {\n                                (!validate.isEmpty(errors)\n                                    && !validate.isEmpty(errors.title)\n                                    && validate.isArray(errors.title)\n                                    && !validate.isEmpty(errors.title[0])) &&\n                                <div className=\"invalid-feedback\">{errors.title[0]}</div>\n                            }\n                        </div>\n                        <div className=\"form-group required mb-2\">\n                            <label htmlFor=\"issueType\" className=\"form-label\">Type</label>\n                            <select id=\"issueType\" className={getClassnames('ISSUE_TYPE')}\n                                value={issueType}\n                                onChange={event => setIssueType(event.target.value)}>\n                                {issueTypeOptions()}\n                            </select>\n                            {\n                                (!validate.isEmpty(errors)\n                                    && !validate.isEmpty(errors.issueType)\n                                    && validate.isArray(errors.issueType)\n                                    && !validate.isEmpty(errors.issueType[0])) &&\n                                <div className=\"invalid-feedback\">{errors.issueType[0]}</div>\n                            }\n                        </div>\n                        {\n                            issueType === \"STORY\" ? (\n                                <>\n                                    <div className=\"form-group required mb-2\">\n                                        <label htmlFor=\"storyStatus\" className=\"form-label\">Status</label>\n                                        <select id=\"storyStatus\" className={getClassnames('STORY_STATUS')}\n                                            value={storyStatus}\n                                            onChange={event => setStoryStatus(event.target.value)}>\n                                            {storyStatusOptions()}\n                                        </select>\n                                        {\n                                            (!validate.isEmpty(errors)\n                                                && !validate.isEmpty(errors.storyStatus)\n                                                && validate.isArray(errors.storyStatus)\n                                                && !validate.isEmpty(errors.storyStatus[0])) &&\n                                            <div className=\"invalid-feedback\">{errors.storyStatus[0]}</div>\n                                        }\n                                    </div>\n                                    <div className=\"form-group required mb-2\">\n                                        <label htmlFor=\"storyPointValue\" className=\"form-label\">Estimated Point</label>\n                                        <input type=\"range\" className={getClassnames('ESTIMATED_POINT')}\n                                            id=\"storyPointValue\"\n                                            value={storyPointValue}\n                                            max={10}\n                                            onChange={event => setStoryPointValue(event.target.value)} />\n                                        {\n                                            (!validate.isEmpty(errors)\n                                                && !validate.isEmpty(errors.storyPointValue)\n                                                && validate.isArray(errors.storyPointValue)\n                                                && !validate.isEmpty(errors.storyPointValue[0])) &&\n                                            <div className=\"invalid-feedback\">{errors.storyPointValue[0]}</div>\n                                        }\n                                        <span>{storyPointValue}</span>\n                                    </div>\n                                </>\n                            ) : (\n                                <>\n                                    <div className=\"form-group required mb-2\">\n                                        <label htmlFor=\"bugStatus\" className=\"form-label\">Status</label>\n                                        <select id=\"bugStatus\" className={getClassnames('BUG_STATUS')}\n                                            value={bugStatus}\n                                            onChange={event => setBugStatus(event.target.value)}>\n                                            {bugStatusOptions()}\n                                        </select>\n                                        {\n                                            (!validate.isEmpty(errors)\n                                                && !validate.isEmpty(errors.bugStatus)\n                                                && validate.isArray(errors.bugStatus)\n                                                && !validate.isEmpty(errors.bugStatus[0])) &&\n                                            <div className=\"invalid-feedback\">{errors.bugStatus[0]}</div>\n                                        }\n                                    </div>\n                                    <div className=\"form-group required mb-2\">\n                                        <label htmlFor=\"bugPriority\" className=\"form-label\">Priority</label>\n                                        <select id=\"bugPriority\" className={getClassnames('BUG_PRIORITY')}\n                                            value={bugPriority}\n                                            onChange={event => setBugPriority(event.target.value)}>\n                                            {bugPriorityOptions()}\n                                        </select>\n                                        {\n                                            (!validate.isEmpty(errors)\n                                                && !validate.isEmpty(errors.bugPriority)\n                                                && validate.isArray(errors.bugPriority)\n                                                && !validate.isEmpty(errors.bugPriority[0])) &&\n                                            <div className=\"invalid-feedback\">{errors.bugPriority[0]}</div>\n                                        }\n                                    </div>\n                                </>\n                            )\n                        }\n                        <div className=\"form-group mb-2\">\n                            <label htmlFor=\"description\" className=\"form-label\">Description</label>\n                            <textarea style={{ resize: \"none\" }} className={getClassnames('DESCRIPTION')}\n                                id=\"description\"\n                                value={description}\n                                onChange={event => setDescription(event.target.value)}\n                                rows=\"3\"></textarea>\n                            {\n                                (!validate.isEmpty(errors)\n                                    && !validate.isEmpty(errors.description)\n                                    && validate.isArray(errors.description)\n                                    && !validate.isEmpty(errors.description[0])) &&\n                                <div className=\"invalid-feedback\">{errors.description[0]}</div>\n                            }\n                        </div>\n                        <div className=\"mt-4\">\n                            <button type=\"submit\" className=\"btn btn-primary\" disabled={formDisabled} >Save</button>\n                            <button type=\"button\" className=\"btn btn-light mx-2\" onClick={() => props.history.goBack()} >Cancel</button>\n                        </div>\n                    </form>\n                </div>\n            </div >\n        </div >\n    )\n}\n\nconst constraints = {\n    title: {\n        presence: {\n            allowEmpty: false,\n            message: function (value, attribute) {\n                return \"must be between 3 and 200 characters\";\n            }\n        },\n        length: {\n            minimum: 3,\n            maximum: 200,\n            message: function (value, attribute) {\n                return \"must be empty between 3 and 200 characters\";\n            }\n        }\n    },\n    issueType: {\n        checkIssueType: {\n            message: function (value, attribute) {\n                return \"must be selected\";\n            }\n        }\n    },\n    storyStatus: {\n        checkStoryStatus: {\n            message: function (value, attribute) {\n                return \"must be selected\";\n            }\n        }\n    },\n    storyPointValue: {\n        checkStoryPointValue: {\n            message: function (value, attribute) {\n                return \"must be selected\";\n            }\n        }\n    },\n    bugStatus: {\n        checkBugStatus: {\n            message: function (value, attribute) {\n                return \"must be selected\";\n            }\n        }\n    },\n    bugPriority: {\n        checkBugPriority: {\n            message: function (value, attribute) {\n                return \"must be selected\";\n            }\n        }\n    },\n    description: {\n        length: {\n            minimum: 0,\n            maximum: 2000,\n            message: function (value, attribute) {\n                return \"must be maximum 2000 characters\";\n            }\n        }\n    },\n}\n\nexport default withRouter(AddIssue);","import { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from 'axios';\nimport validate from 'validate.js';\nimport classNames from 'classnames';\nimport HttpStatus from 'http-status-codes';\nimport { IssueType, StoryStatus, BugPriority, BugStatus } from './enum';\nimport './validator';\n\nconst EditIssue = (props) => {\n\n    const [title, setTitle] = useState('');\n    const [description, setDescription] = useState('');\n    const [issueType, setIssueType] = useState('STORY');\n    const [storyStatus, setStoryStatus] = useState('NEW');\n    const [storyPointValue, setStoryPointValue] = useState(1);\n    const [bugPriority, setBugPriority] = useState('MAJOR');\n    const [bugStatus, setBugStatus] = useState('NEW');\n    const [version, setVersion] = useState(0);\n    const [formDisabled, setFormDisabled] = useState(false);\n    const [successSaved, setSuccessSaved] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [responseErrors, setResponseErrors] = useState({});\n\n    const getClassnames = (type) => {\n        switch (type) {\n            case 'TITLE':\n                return classNames({\n                    'form-control': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.title)\n                        && validate.isArray(errors.title)\n                        && !validate.isEmpty(errors.title[0])\n                });\n            case 'ISSUE_TYPE':\n                return classNames({\n                    'form-control': true,\n                    'form-select': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.issueType)\n                        && validate.isArray(errors.issueType)\n                        && !validate.isEmpty(errors.issueType[0])\n                });\n            case 'STORY_STATUS':\n                return classNames({\n                    'form-control': true,\n                    'form-select': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.storyStatus)\n                        && validate.isArray(errors.storyStatus)\n                        && !validate.isEmpty(errors.storyStatus[0])\n                });\n            case 'ESTIMATED_POINT':\n                return classNames({\n                    'form-range': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.storyPointValue)\n                        && validate.isArray(errors.storyPointValue)\n                        && !validate.isEmpty(errors.storyPointValue[0])\n                });\n            case 'BUG_PRIORITY':\n                return classNames({\n                    'form-control': true,\n                    'form-select': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.bugPriority)\n                        && validate.isArray(errors.bugPriority)\n                        && !validate.isEmpty(errors.bugPriority[0])\n                });\n            case 'BUG_STATUS':\n                return classNames({\n                    'form-control': true,\n                    'form-select': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.bugStatus)\n                        && validate.isArray(errors.bugStatus)\n                        && !validate.isEmpty(errors.bugStatus[0])\n                });\n            case 'DESCRIPTION':\n                return classNames({\n                    'form-control': true,\n                    'is-invalid': !validate.isEmpty(errors)\n                        && !validate.isEmpty(errors.description)\n                        && validate.isArray(errors.description)\n                        && !validate.isEmpty(errors.description[0])\n                });\n            default:\n                return classNames({\n                    'form-control': true\n                });\n        }\n    }\n\n    const issueTypeOptions = () => {\n        const options = Object.keys(IssueType).map(key => {\n            let value = IssueType[key];\n            return <option key={key} value={key}>{value}</option>;\n        })\n        return options;\n    }\n\n    const storyStatusOptions = () => {\n        const options = Object.keys(StoryStatus).map(key => {\n            let value = StoryStatus[key];\n            return <option key={key} value={key}>{value}</option>;\n        })\n        return options;\n    }\n\n    const bugStatusOptions = () => {\n        const options = Object.keys(BugStatus).map(key => {\n            let value = BugStatus[key];\n            return <option key={key} value={key}>{value}</option>;\n        })\n        return options;\n    }\n\n    const bugPriorityOptions = () => {\n        const options = Object.keys(BugPriority).map(key => {\n            let value = BugPriority[key];\n            return <option key={key} value={key}>{value}</option>;\n        })\n        return options;\n    }\n\n    useEffect(() => {\n        const { issueId } = props.match.params;\n        getBasic(issueId);\n    }, []);\n\n    const getBasic = (issueId) => {\n        axios.get(`/api/v1/issues/${issueId}`)\n            .then(response => {\n                if (response.status === HttpStatus.OK) {\n                    if (validate.isEmpty(response.data) || !validate.isObject(response.data)) {\n                        throw new Error(\"response data in not correct.\")\n                    }\n                    const data = response.data;\n                    const id = !validate.isEmpty(data.id) ? data.id : '';\n                    const title = !validate.isEmpty(data.title) ? data.title : '';\n                    const type = !validate.isEmpty(data.type) ? data.type : 'STORY';\n                    const status = !validate.isEmpty(data.status) ? data.status : '';\n                    const estimatedPoint = !validate.isEmpty(data.estimatedPoint) ? data.estimatedPoint : '';\n                    const priority = !validate.isEmpty(data.priority) ? data.priority : '';\n                    const description = !validate.isEmpty(data.description) ? data.description : '';\n                    const version = !validate.isEmpty(data.version) ? data.version : 0;\n                    setTitle(title);\n                    setDescription(description);\n                    setIssueType(type);\n                    if (type === 'STORY') {\n                        setStoryStatus(status);\n                        setStoryPointValue(estimatedPoint);\n                    } else {\n                        setBugStatus(status);\n                        setBugPriority(priority);\n                    }\n                    setVersion(version);\n                }\n            })\n            .catch(error => {\n                if (error.response) {\n\n                }\n            });\n    }\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        const result = validate({ title, issueType, storyStatus, storyPointValue, bugStatus, bugPriority, description }, constraints);\n        if (!validate.isEmpty(result)) {\n            setErrors(result);\n            return;\n        } else {\n            setFormDisabled(true);\n            setErrors({});\n            setResponseErrors([]);\n        }\n        let params = {};\n        if (!validate.isEmpty(title)) {\n            params = { ...params, title }\n        }\n        if (!validate.isEmpty(description)) {\n            params = { ...params, description };\n        }\n        let path;\n        if (issueType === \"STORY\") {\n            path = 'stories';\n            if (!validate.isEmpty(storyStatus)) {\n                params = { ...params, status: storyStatus }\n            }\n            if (!validate.isEmpty(storyPointValue)) {\n                params = { ...params, estimatedPoint: storyPointValue };\n            }\n        } else {\n            path = 'bugs';\n            if (!validate.isEmpty(bugStatus)) {\n                params = { ...params, status: bugStatus }\n            }\n            if (!validate.isEmpty(bugPriority)) {\n                params = { ...params, priority: bugPriority };\n            }\n        }\n        params = { ...params, version };\n        const { issueId } = props.match.params;\n        axios.put(`/api/v1/issues/${path}/${issueId}`, params)\n            .then(response => {\n                if (response.status === HttpStatus.OK) {\n                    const data = response.data;\n                    const version = !validate.isEmpty(data.version) ? data.version : 0;\n                    setSuccessSaved(true);\n                    setVersion(version);\n                    setTimeout(function () { setSuccessSaved(false); }, 5000);\n                }\n            }).catch(error => {\n                if (error.response) {\n                    if (error.response.status === HttpStatus.BAD_REQUEST) {\n                        const errorData = error.response.data.message;\n                        setResponseErrors([errorData]);\n                    }\n                }\n            }).finally(() => {\n                setFormDisabled(false);\n            });\n    }\n\n    return (\n        <div className=\"container mt-4 mb-4\">\n            <h2>Edit Issue</h2>\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <form onSubmit={onSubmit}>\n                        {\n                            responseErrors.length > 0 &&\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                <ul className=\"m-0 p-3\">\n                                    {\n                                        responseErrors.map((error, index) => <li key={index} className=\"font-weight-lighter\">{error}</li>)\n                                    }\n                                </ul>\n                            </div>\n                        }\n                        {\n                            successSaved &&\n                            <div className=\"alert alert-success\" role=\"alert\">Your issue have been successfully saved!</div>\n                        }\n                        <div className=\"form-group required mb-2\">\n                            <label htmlFor=\"title\" className=\"form-label\">Title</label>\n                            <input type=\"text\" className={getClassnames('TITLE')}\n                                id=\"title\"\n                                value={title}\n                                onChange={event => setTitle(event.target.value)}\n                                aria-describedby=\"titleHelp\" />\n                            <div id=\"titleHelp\" className=\"form-text\">Must have at least 3 charachters length.</div>\n                            {\n                                (!validate.isEmpty(errors)\n                                    && !validate.isEmpty(errors.title)\n                                    && validate.isArray(errors.title)\n                                    && !validate.isEmpty(errors.title[0])) &&\n                                <div className=\"invalid-feedback\">{errors.title[0]}</div>\n                            }\n                        </div>\n                        <div className=\"form-group required mb-2\">\n                            <label htmlFor=\"issueType\" className=\"form-label\">Type</label>\n                            <select id=\"issueType\" className={getClassnames('ISSUE_TYPE')}\n                                value={issueType}\n                                disabled={true}>\n                                {issueTypeOptions()}\n                            </select>\n                            {\n                                (!validate.isEmpty(errors)\n                                    && !validate.isEmpty(errors.issueType)\n                                    && validate.isArray(errors.issueType)\n                                    && !validate.isEmpty(errors.issueType[0])) &&\n                                <div className=\"invalid-feedback\">{errors.issueType[0]}</div>\n                            }\n                        </div>\n                        {\n                            issueType === \"STORY\" ? (\n                                <>\n                                    <div className=\"form-group required mb-2\">\n                                        <label htmlFor=\"storyStatus\" className=\"form-label\">Status</label>\n                                        <select id=\"storyStatus\" className={getClassnames('STORY_STATUS')}\n                                            value={storyStatus}\n                                            onChange={event => setStoryStatus(event.target.value)}>\n                                            {storyStatusOptions()}\n                                        </select>\n                                        {\n                                            (!validate.isEmpty(errors)\n                                                && !validate.isEmpty(errors.storyStatus)\n                                                && validate.isArray(errors.storyStatus)\n                                                && !validate.isEmpty(errors.storyStatus[0])) &&\n                                            <div className=\"invalid-feedback\">{errors.storyStatus[0]}</div>\n                                        }\n                                    </div>\n                                    <div className=\"form-group required mb-2\">\n                                        <label htmlFor=\"storyPointValue\" className=\"form-label\">Estimated Point</label>\n                                        <input type=\"range\" className={getClassnames('ESTIMATED_POINT')}\n                                            id=\"storyPointValue\"\n                                            value={storyPointValue}\n                                            max={10}\n                                            onChange={event => setStoryPointValue(event.target.value)} />\n                                        {\n                                            (!validate.isEmpty(errors)\n                                                && !validate.isEmpty(errors.storyPointValue)\n                                                && validate.isArray(errors.storyPointValue)\n                                                && !validate.isEmpty(errors.storyPointValue[0])) &&\n                                            <div className=\"invalid-feedback\">{errors.storyPointValue[0]}</div>\n                                        }\n                                        <span>{storyPointValue}</span>\n                                    </div>\n                                </>\n                            ) : (\n                                <>\n                                    <div className=\"form-group required mb-2\">\n                                        <label htmlFor=\"bugStatus\" className=\"form-label\">Status</label>\n                                        <select id=\"bugStatus\" className={getClassnames('BUG_STATUS')}\n                                            value={bugStatus}\n                                            onChange={event => setBugStatus(event.target.value)}>\n                                            {bugStatusOptions()}\n                                        </select>\n                                        {\n                                            (!validate.isEmpty(errors)\n                                                && !validate.isEmpty(errors.bugStatus)\n                                                && validate.isArray(errors.bugStatus)\n                                                && !validate.isEmpty(errors.bugStatus[0])) &&\n                                            <div className=\"invalid-feedback\">{errors.bugStatus[0]}</div>\n                                        }\n                                    </div>\n                                    <div className=\"form-group required mb-2\">\n                                        <label htmlFor=\"bugPriority\" className=\"form-label\">Priority</label>\n                                        <select id=\"bugPriority\" className={getClassnames('BUG_PRIORITY')}\n                                            value={bugPriority}\n                                            onChange={event => setBugPriority(event.target.value)}>\n                                            {bugPriorityOptions()}\n                                        </select>\n                                        {\n                                            (!validate.isEmpty(errors)\n                                                && !validate.isEmpty(errors.bugPriority)\n                                                && validate.isArray(errors.bugPriority)\n                                                && !validate.isEmpty(errors.bugPriority[0])) &&\n                                            <div className=\"invalid-feedback\">{errors.bugPriority[0]}</div>\n                                        }\n                                    </div>\n                                </>\n                            )\n                        }\n                        <div className=\"form-group mb-2\">\n                            <label htmlFor=\"description\" className=\"form-label\">Description</label>\n                            <textarea style={{ resize: \"none\" }} className={getClassnames('DESCRIPTION')}\n                                id=\"description\"\n                                value={description}\n                                onChange={event => setDescription(event.target.value)}\n                                rows=\"3\"></textarea>\n                            {\n                                (!validate.isEmpty(errors)\n                                    && !validate.isEmpty(errors.description)\n                                    && validate.isArray(errors.description)\n                                    && !validate.isEmpty(errors.description[0])) &&\n                                <div className=\"invalid-feedback\">{errors.description[0]}</div>\n                            }\n                        </div>\n                        <div className=\"mt-4\">\n                            <button type=\"submit\" className=\"btn btn-primary\" disabled={formDisabled} >Save</button>\n                            <button type=\"button\" className=\"btn btn-light mx-2\" onClick={() => props.history.goBack()} >Cancel</button>\n                        </div>\n                    </form>\n                </div>\n            </div >\n        </div >\n    )\n}\n\nconst constraints = {\n    title: {\n        presence: {\n            allowEmpty: false,\n            message: function (value, attribute) {\n                return \"must be between 3 and 200 characters\";\n            }\n        },\n        length: {\n            minimum: 3,\n            maximum: 200,\n            message: function (value, attribute) {\n                return \"must be empty between 3 and 200 characters\";\n            }\n        }\n    },\n    issueType: {\n        checkIssueType: {\n            message: function (value, attribute) {\n                return \"must be selected\";\n            }\n        }\n    },\n    storyStatus: {\n        checkStoryStatus: {\n            message: function (value, attribute) {\n                return \"must be selected\";\n            }\n        }\n    },\n    storyPointValue: {\n        checkStoryPointValue: {\n            message: function (value, attribute) {\n                return \"must be selected\";\n            }\n        }\n    },\n    bugStatus: {\n        checkBugStatus: {\n            message: function (value, attribute) {\n                return \"must be selected\";\n            }\n        }\n    },\n    bugPriority: {\n        checkBugPriority: {\n            message: function (value, attribute) {\n                return \"must be selected\";\n            }\n        }\n    },\n    description: {\n        length: {\n            minimum: 0,\n            maximum: 2000,\n            message: function (value, attribute) {\n                return \"must be maximum 2000 characters\";\n            }\n        }\n    },\n}\n\nexport default withRouter(EditIssue);","import { useState, useEffect, useRef } from \"react\";\nimport { Link, withRouter } from 'react-router-dom';\nimport Tooltip from 'rc-tooltip';\nimport axios from 'axios';\nimport validate from 'validate.js';\nimport queryString from 'query-string';\nimport HttpStatus from 'http-status-codes';\nimport Pagination from '../commons/Pagination';\nimport { Modal } from 'bootstrap';\nimport 'rc-tooltip/assets/bootstrap.css';\n\nconst ListIssue = (props) => {\n\n    const [title, setTitle] = useState('');\n    const [size, setSize] = useState(10);\n    const [start, setStart] = useState(0);\n    const [totalItems, setTotalItems] = useState(0);\n    const [items, setItems] = useState([]);\n    const [disabledDelete, setDisabledDelete] = useState(false);\n    const [deleteInProgress, setDeleteInProgress] = useState(false);\n    const [issueIdForDelete, setIssueIdForDelete] = useState('');\n    const deleteModal = useRef(null);\n\n    useEffect(() => paginate(1), [size, title]);\n\n    const paginate = (selectedPageNumber) => {\n        const start = (selectedPageNumber - 1) * size;\n        setStart(start);\n        getItems(start, size, title);\n    }\n\n    const getItems = (start, size, ti) => {\n        const { history } = props;\n        const title = !validate.isEmpty(ti) ? ti : undefined;\n        // Update browser url\n        const t = queryString.stringify({ title }, { sort: false });\n        history.push(`${props.match.url}?${t}`);\n        const params = {\n            startIndex: start,\n            itemsPerPage: size,\n            title: title,\n        }\n        axios.get(`/api/v1/issues`, { params: params })\n            .then(response => {\n                if (response.status === HttpStatus.OK) {\n                    if (validate.isEmpty(response.data) || !validate.isObject(response.data)) {\n                        throw new Error(\"response data is not correct.\")\n                    }\n                    const data = response.data;\n                    const totalItems = data.totalItems;\n                    const items = data.items;\n                    setTotalItems(totalItems);\n                    setItems(items);\n                }\n            }).catch(error => {\n                if (error.response) {\n\n                }\n            });;\n    }\n\n    // Delete modal \n    const showDeleteModal = (issueId) => {\n        setIssueIdForDelete(issueId);\n        const modalEle = deleteModal.current\n        const bsModal = new Modal(modalEle, {\n            keyboard: false\n        })\n        bsModal.show();\n    }\n\n    const hideDeleteModal = () => {\n        const modalEle = deleteModal.current\n        const bsModal = Modal.getInstance(modalEle)\n        bsModal.hide();\n    }\n\n    const deleteIssue = () => {\n        const issueId = issueIdForDelete;\n        setDisabledDelete(true);\n        setDeleteInProgress(true);\n        axios.delete(`/api/v1/issues/${issueId}`)\n            .then(response => {\n                if (response.status === HttpStatus.NO_CONTENT) {\n                    setDisabledDelete(false);\n                    setDeleteInProgress(false);\n                    paginate(1);\n                    hideDeleteModal();\n                }\n            })\n            .catch(error => {\n                if (error.response) {\n                    setDisabledDelete(false);\n                    setDeleteInProgress(false);\n                }\n            });\n    }\n\n    const initialPage = Math.ceil(start / size) + 1;\n\n    return (\n        <div className=\"container mt-4 mb-4\">\n            <h2>List Issues</h2>\n            <div className=\"row\">\n                <div className=\"d-flex align-items-center mb-2 col-12 col-sm-7 col-md-6 col-lg-9\">\n                    <div className=\"mx-1\">\n                        <input id=\"title\" type=\"text\" className=\"form-control\"\n                            value={title} placeholder=\"Search by title\"\n                            onChange={event => setTitle(event.target.value)} />\n                    </div>\n                </div>\n                <div className=\"d-flex justify-content-end align-items-end mb-2 col-12 col-sm-5 col-md-6 col-lg-3\">\n                    <Link className=\"btn btn-primary mx-2\" to={`${props.match.url}/add`}>New Issue</Link>\n                </div>\n            </div>\n            {/* <hr /> */}\n            <div className=\"table-responsive\">\n                <table className=\"table table-hover\">\n                    <thead>\n                        <tr>\n                            <th className=\"text-nowrap\">Title</th>\n                            <th className=\"text-nowrap\">Type</th>\n                            <th className=\"text-nowrap\">Description</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    {\n                        items.length > 0 &&\n                        <tbody>\n                            {\n                                items.map(issue => {\n                                    return (\n                                        <tr key={issue.id} >\n                                            <td className=\"align-middle\">{issue.title}</td>\n                                            <td className=\"text-nowrap align-middle\">\n                                                {issue.type === \"STORY\" ? (\n                                                    <>\n                                                        <img src=\"/images/story.png\" width=\"16px\" height=\"16px\" />\n                                                        <span className=\"mx-3\">Story</span>\n                                                    </>) : (\n                                                    <>\n                                                        <img src=\"/images/bug.png\" width=\"16px\" height=\"16px\" />\n                                                        <span className=\"mx-3\">Bug</span>\n                                                    </>\n                                                )\n                                                }\n                                            </td>\n                                            <td className=\"text-nowrap align-middle\">{issue.description}</td>\n                                            <td className=\"align-middle\">\n                                                <div className=\"d-flex justify-content-end align-content-center\" >\n                                                    <div className=\"d-flex flex-row\" style={{ width: \"105px\", height: \"30px\" }}>\n                                                        <>\n                                                            <Tooltip placement=\"bottom\" trigger={['hover']} overlay={() => <span className=\"font-weight-lighter\">Edit</span>}>\n                                                                <Link className=\"btn btn-sm\" to={`${props.match.url}/${issue.id}/edit`}>\n                                                                    <i className=\"fas fa-edit fa-fw text-center\"></i>\n                                                                </Link>\n                                                            </Tooltip>\n                                                            <Tooltip placement=\"bottom\" trigger={['hover']} overlay={() => <span className=\"font-weight-lighter\">Delete</span>}>\n                                                                <button className=\"btn btn-sm\" onClick={() => showDeleteModal(issue.id)}>\n                                                                    <i className=\"fas fa-trash fa-fw text-center\"></i>\n                                                                </button>\n                                                            </Tooltip>\n                                                        </>\n                                                    </div>\n                                                </div>\n                                            </td>\n                                        </tr>\n                                    );\n                                })\n                            }\n                        </tbody>\n                    }\n                </table>\n            </div>\n            {\n                totalItems > 0 &&\n                <div className=\"d-flex justify-content-end align-items-center my-5\">\n                    <Pagination totalItems={totalItems} itemsPerPage={size}\n                        initialPage={initialPage} renderOnOnlyOnePage={false} callback={paginate} />\n                    <div className=\"mx-2\" style={{ width: \"80px\", marginBottom: \"1rem\" }}>\n                        <select id=\"size\" className=\"form-control form-select\" style={{ height: \"35px\" }}\n                            value={size}\n                            onChange={event => setSize(event.target.value)}>\n                            <option value=\"10\">10</option>\n                            <option value=\"25\">25</option>\n                            <option value=\"50\">50</option>\n                            <option value=\"100\">100</option>\n                            <option value=\"500\">500</option>\n                        </select>\n                    </div>\n                </div>\n            }\n            <div className=\"modal\" ref={deleteModal} id=\"deleteModal\" tabIndex=\"-1\" aria-labelledby=\"deleteModalLabel\" aria-hidden=\"true\" >\n                <div className=\"modal-dialog\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\">Delete Issue</h5>\n                            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                        </div>\n                        <div className=\"modal-body\">\n                            <p>Are you sure?</p>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n                            <button type=\"button\" className=\"btn btn-danger mx-1\" onClick={deleteIssue} disabled={disabledDelete}>\n                                {\n                                    deleteInProgress &&\n                                    <div className=\"spinner-border spinner-border-sm align-middle text-light mx-2\" role=\"status\">\n                                        <span className=\"sr-only\"></span>\n                                    </div>\n                                }\n                                Delete\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(ListIssue);","import { useState, useEffect, useRef } from \"react\";\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport validate from 'validate.js';\nimport queryString from 'query-string';\nimport HttpStatus from 'http-status-codes';\nimport 'rc-tooltip/assets/bootstrap.css';\n\nconst ShowPlanner = (props) => {\n\n    const [point, setPoint] = useState(10);\n    const [maxPoint, setMaxPoint] = useState(10);\n    const [items, setItems] = useState([]);\n\n    useEffect(() => getItems(maxPoint), []);\n\n    useEffect(() => getItems(maxPoint), [maxPoint]);\n\n    const setPointInput = (value) => {\n        setPoint(value);\n        var valueInInteger = parseInt(value);\n        if (valueInInteger >= 10) {\n            setMaxPoint(valueInInteger);\n        }\n    }\n\n    const getItems = (maxPo) => {\n        const { history } = props;\n        const maxPoint = !validate.isEmpty(maxPo) ? maxPo : undefined;\n        // Update browser url\n        const mp = queryString.stringify({ maxPoint }, { sort: false });\n        history.push(`${props.match.url}?${mp}`);\n        const params = {\n            maxPoint: maxPoint,\n        }\n        axios.get(`/api/v1/planner`, { params: params })\n            .then(response => {\n                if (response.status === HttpStatus.OK) {\n                    if (validate.isEmpty(response.data) || !validate.isObject(response.data)) {\n                        throw new Error(\"response data is not correct.\")\n                    }\n                    const items = response.data;\n                    setItems(items);\n                }\n            }).catch(error => {\n                if (error.response) {\n\n                }\n            });;\n    }\n    return (\n        <div className=\"container mt-4 mb-4\">\n            <h2>Planned Issues</h2>\n            <div className=\"row\">\n                <div className=\"d-flex align-items-center mb-2 col-12 col-sm-7 col-md-6 col-lg-9\">\n                    <div className=\"mx-1\">\n                        <input id=\"max-point\" type=\"text\" className=\"form-control\"\n                            value={point} placeholder=\"Max point value\"\n                            onChange={event => setPointInput(event.target.value)} />\n                    </div>\n                    <span className=\"mx-2\">{`Max Point Value >= 10`}</span>\n                </div>\n            </div>\n            {\n                items.map((weekItems, index) => {\n                    return (\n                        <div key={index}>\n                            <h3 className=\"text-danger\">{`Week ${index + 1}`}</h3>\n                            <div className=\"table-responsive\">\n                                <table className=\"table table-striped  table-borderless\">\n                                    <thead>\n                                        <tr>\n                                            <th className=\"text-nowrap\">Title</th>\n                                            <th className=\"text-nowrap\">Description</th>\n                                            <th className=\"text-nowrap\">Status</th>\n                                            <th className=\"text-nowrap\">Estimated Point</th>\n                                            <th className=\"text-nowrap\">Assigned To</th>\n                                        </tr>\n                                    </thead>\n                                    {\n                                        weekItems.length > 0 &&\n                                        <tbody>\n                                            {\n                                                weekItems.map(issue => {\n                                                    return (\n                                                        <tr key={issue.id} >\n                                                            <td className=\"align-middle\">{issue.title}</td>\n                                                            <td className=\"text-nowrap align-middle\">{issue.description}</td>\n                                                            <td className=\"text-nowrap align-middle\">{issue.status === 'NEW' ? 'New'\n                                                                : issue.status === 'ESTIMATED' ? 'Estimated'\n                                                                    : issue.status === 'COMPLETED' ? 'Completed' : ''}</td>\n                                                            <td className=\"text-nowrap align-middle\">{issue.estimatedPoint}</td>\n                                                            <td className=\"text-nowrap align-middle\">{issue.assignedDeveloper}</td>\n                                                        </tr>\n                                                    );\n                                                })\n                                            }\n                                        </tbody>\n                                    }\n                                </table>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default withRouter(ShowPlanner);","import { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport validate from 'validate.js';\nimport HttpStatus from 'http-status-codes';\n\nconst Home = () => {\n\n    return (\n        <div className=\"container mt-4 mb-4\">\n            <div className=\"text-center h2\">\n                <img src=\"/images/logo.png\" width=\"64px\" height=\"64px\" />\n                <span className=\"mx-2\">Issue Tracker Task</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","const NotFound = () => <h5 className=\"text-center mt-4\">404 Not found</h5>\n\nexport default NotFound;","import { Switch, Route } from 'react-router-dom';\nimport AddDeveloper from '../developer/AddDeveloper';\nimport EditDeveloper from '../developer/EditDeveloper';\nimport ListDeveloper from '../developer/ListDeveloper';\nimport AddIssue from '../issue/AddIssue';\nimport EditIssue from '../issue/EditIssue';\nimport ListIssue from '../issue/ListIssue';\nimport ShowPlanner from '../planner/ShowPlanner';\nimport Home from '../home/Home';\nimport NotFound from '../error/NotFound';\n\n\nconst Content = () => {\n\n    return (\n        <main id=\"content\" role=\"main\" >\n            <Switch>\n                <Route path=\"/developers/add\" component={AddDeveloper} />\n                <Route path=\"/developers/:developerId/edit\" component={EditDeveloper} />\n                <Route path=\"/developers\" component={ListDeveloper} />\n                <Route path=\"/issues/add\" component={AddIssue} />\n                <Route path=\"/issues/:issueId/edit\" component={EditIssue} />\n                <Route path=\"/issues\" component={ListIssue} />\n                <Route path=\"/planner\" component={ShowPlanner} />\n                <Route path=\"/\" exact component={Home} />\n                {/* <Route path=\"/organizations/:organizationId/maintenance\" component={MaintenanceModuleRoute} /> */}\n                {/* when none of the above match, <NoMatch> will be rendered */}\n                <Route component={NotFound} />\n            </Switch>\n        </main>\n    )\n}\n\nexport default Content;","import { Link } from 'react-router-dom';\n\nexport const NavBar = () => {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light shadow-sm\">\n            <div className=\"container-fluid\">\n                <Link className=\"navbar-brand\" to={'/'} >\n                    <img src=\"../images/logo.png\" width=\"24px\" height=\"24px\" />\n                </Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to={`/developers`}>Developers</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to={'/issues'}>Issues</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to={'/planner'}>Planner</Link>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n    )\n}","import Content from './components/template/Content';\nimport { NavBar } from './components/template/NavBar';\n\nfunction App() {\n  return (\n    <div>\n      <NavBar />\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport history from './config/history';\nimport './config/axios';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './css/style.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}